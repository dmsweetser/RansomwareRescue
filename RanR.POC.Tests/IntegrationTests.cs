using Microsoft.VisualStudio.TestTools.UnitTesting;
using Newtonsoft.Json;
using RanR.POC.Helpers;
using RanR.POC.Logging;
using RanR.POC.Operations;
using RanR.POC.SolutionDefinitions;
using RanR.POC.SolutionManagement;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq.Expressions;
using System.Numerics;
using System.Reflection;
using System.Threading;

namespace RanR.POC.Tests
{
    [TestClass]
    public class IntegrationTests
    {
 
        [TestMethod]
        public void generate_and_execute_found_solution_for_simple_file_with_provided_x()
        {
            var tokenSource = new CancellationTokenSource();
            var token = tokenSource.Token;
            var solutionRepository = new SolutionRepository(tokenSource);
            var assembly = Assembly.GetExecutingAssembly();
            var initializer = new Initializer();

            //Note that this is a precalculated value, so it will immediately pass
            initializer.InitialValueForX = "";

            var initialConvertedFiles = new List<BigInteger>();
            List<string> initialFilesToProcess = new List<string>
                {
                    "RanR.POC.Tests.Samples._7ZIP.Simple1.txt.7z",
                    "RanR.POC.Tests.Samples._7ZIP.Simple1.txt",
                    "RanR.POC.Tests.Samples._7ZIP.Simple3.txt.7z"
                };

            foreach (var file in initialFilesToProcess)
            {
                using (Stream stream = assembly.GetManifestResourceStream(file))
                {
                    byte[] fileBytes = new byte[stream.Length];
                    stream.Read(fileBytes, 0, fileBytes.Length);
                    initialConvertedFiles.Add(new BigInteger(fileBytes));
                }
            }

            initializer.AddFiles(initialConvertedFiles);
            initializer.InitializeSolutionGenerator(tokenSource, solutionRepository);
            while (!solutionRepository.SolutionFound)
            {
            }

            BigInteger plainText;
            using (Stream stream = assembly.GetManifestResourceStream("RanR.POC.Tests.Samples._7ZIP.Simple3.txt"))
            {
                byte[] fileBytes = new byte[stream.Length];
                stream.Read(fileBytes, 0, fileBytes.Length);
                plainText = new BigInteger(fileBytes);
            }

            var calculatedResult = SolutionGenerator.ExecuteSolution(solutionRepository.IdentifiedSolution);

            Assert.AreEqual(plainText, calculatedResult);
        }

        [TestMethod]
        public void generate_and_execute_found_solution_for_complex_file_with_provided_x()
        {
            var tokenSource = new CancellationTokenSource();
            var token = tokenSource.Token;
            var solutionRepository = new SolutionRepository(tokenSource);
            var assembly = Assembly.GetExecutingAssembly();
            var initializer = new Initializer();

            //Note that this is a precalculated value, so it will immediately pass
            initializer.InitialValueForX = "";

            var initialConvertedFiles = new List<BigInteger>();
            List<string> initialFilesToProcess = new List<string>
                {
                    "RanR.POC.Tests.Samples._7ZIP.Complex1.txt.7z",
                    "RanR.POC.Tests.Samples._7ZIP.Complex1.txt",
                    "RanR.POC.Tests.Samples._7ZIP.Complex2.txt.7z"
                };

            foreach (var file in initialFilesToProcess)
            {
                using (Stream stream = assembly.GetManifestResourceStream(file))
                {
                    byte[] fileBytes = new byte[stream.Length];
                    stream.Read(fileBytes, 0, fileBytes.Length);
                    initialConvertedFiles.Add(new BigInteger(fileBytes));
                }
            }

            initializer.AddFiles(initialConvertedFiles);
            initializer.InitializeSolutionGenerator(tokenSource, solutionRepository);
            while (!solutionRepository.SolutionFound)
            {
            }

            BigInteger plainText;
            using (Stream stream = assembly.GetManifestResourceStream("RanR.POC.Tests.Samples._7ZIP.Complex2.txt"))
            {
                byte[] fileBytes = new byte[stream.Length];
                stream.Read(fileBytes, 0, fileBytes.Length);
                plainText = new BigInteger(fileBytes);
            }

            var calculatedResult = SolutionGenerator.ExecuteSolution(solutionRepository.IdentifiedSolution);

            Assert.AreEqual(plainText, calculatedResult);
        }

        [TestMethod]
        public void generate_and_execute_solution_for_simple_file_without_providing_x()
        {
            var tokenSource = new CancellationTokenSource();
            var token = tokenSource.Token;
            var solutionRepository = new SolutionRepository(tokenSource);
            var assembly = Assembly.GetExecutingAssembly();
            var initializer = new Initializer();



            var initialConvertedFiles = new List<BigInteger>();
            List<string> initialFilesToProcess = new List<string>
                {
                    "RanR.POC.Tests.Samples._7ZIP.Simple1.txt.7z",
                    "RanR.POC.Tests.Samples._7ZIP.Simple1.txt",
                    "RanR.POC.Tests.Samples._7ZIP.Simple3.txt.7z"
                };

            foreach (var file in initialFilesToProcess)
            {
                using (Stream stream = assembly.GetManifestResourceStream(file))
                {
                    byte[] fileBytes = new byte[stream.Length];
                    stream.Read(fileBytes, 0, fileBytes.Length);
                    initialConvertedFiles.Add(new BigInteger(fileBytes));
                }
            }

            var tempSolution = new Solution((initialConvertedFiles[0], initialConvertedFiles[1]), initialConvertedFiles[2]);
            initializer.AddFiles(initialConvertedFiles);
            initializer.InitializeSolutionGenerator(tokenSource, solutionRepository);
            while (!solutionRepository.SolutionFound)
            {
            }

            BigInteger plainText;
            using (Stream stream = assembly.GetManifestResourceStream("RanR.POC.Tests.Samples._7ZIP.Simple3.txt"))
            {
                byte[] fileBytes = new byte[stream.Length];
                stream.Read(fileBytes, 0, fileBytes.Length);
                plainText = new BigInteger(fileBytes);
            }

            var calculatedResult = SolutionGenerator.ExecuteSolution(solutionRepository.IdentifiedSolution);

            Assert.AreEqual(plainText, calculatedResult);
        }
    }
}

